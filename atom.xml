<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朱小杰</title>
  
  <subtitle>朱小杰的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiaojiezhu/"/>
  <updated>2017-11-19T15:17:55.280Z</updated>
  <id>http://blog.xiaojiezhu/</id>
  
  <author>
    <name>朱小杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spark运行时的版本问题</title>
    <link href="http://blog.xiaojiezhu/2017/11/19/spark%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.xiaojiezhu/2017/11/19/spark运行时的版本问题/</id>
    <published>2017-11-19T15:00:43.000Z</published>
    <updated>2017-11-19T15:17:55.280Z</updated>
    
    <content type="html"><![CDATA[<p>第一次运行的时候，报了这样的一个错误<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.NoSuchMethodError: scala.Predef$.refArrayOps([Ljava/lang/Object;)Lscala/collection/mutable/ArrayOps;</span><br><span class="line">at org.apache.spark.util.Utils$.getCallSite(Utils.scala:<span class="number">1440</span>)</span><br><span class="line">at org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:<span class="number">76</span>)</span><br><span class="line">at org.apache.spark.api.java.JavaSparkContext.&lt;init&gt;(JavaSparkContext.scala:<span class="number">58</span>)</span><br><span class="line">at com.xiaojiezhu.spark.rdd.wordcount.JavaWordCount.main(JavaWordCount.java:<span class="number">26</span>)</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/QlvAiyR.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>报错的位置是<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/R9p7FVR.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>很奇怪，这一行为什么要报错呢</p><p><strong>原因是这样的</strong><br>spark的版本要与scala的版本一致才行，我们回头看一下spark的maven坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们仔细看一下<code>artifactId</code>里面的属性，后面是带了一个版本号的<code>2.10</code>，这个版本号就是spark对应的scala版本，需要版本相对应才能正确运行</p><p>于是乎，我卸载了scala，在scala官网找到相应的2.10的版本重新安装，然后就好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次运行的时候，报了这样的一个错误&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Exception in thread &lt;span class=
      
    
    </summary>
    
      <category term="spark" scheme="http://blog.xiaojiezhu/categories/spark/"/>
    
    
      <category term="spark问题" scheme="http://blog.xiaojiezhu/tags/spark%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>spark的wordcount</title>
    <link href="http://blog.xiaojiezhu/2017/11/19/spark%E7%9A%84wordcount/"/>
    <id>http://blog.xiaojiezhu/2017/11/19/spark的wordcount/</id>
    <published>2017-11-19T12:52:49.000Z</published>
    <updated>2017-11-19T15:18:08.052Z</updated>
    
    <content type="html"><![CDATA[<p>基本上学习大数据的第一个应用程序，都是一个wordcount程序，也就是统计一个文本里面出现的单词次数</p><blockquote><p>第一个wordcount以英文单词来演示，因为中文是以词语来切分才会有意思，如果中文切分词语，又要用到分词技术，分词并不是本文的重点，如果想要了解中文分词，请参考作者的另一篇文章<a href="http://www.cnblogs.com/zhuxiaojie/p/7224772.html" target="_blank" rel="external">hadoop的wordcount</a>，这里面有详细的中文分词，甚至统计了斗破苍穹这本小说哪些词语出现的最多，你们猜恐怖如斯出现了多少次呢</p></blockquote><h1 id="准备一个文本"><a href="#准备一个文本" class="headerlink" title="准备一个文本"></a>准备一个文本</h1><p>文本内容如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">hello jane</span><br><span class="line">hello jie</span><br><span class="line">hello kangkang</span><br><span class="line">fuck you</span><br><span class="line">i am god</span><br></pre></td></tr></table></figure></p><h1 id="wordcount的java实现"><a href="#wordcount的java实现" class="headerlink" title="wordcount的java实现"></a>wordcount的java实现</h1><h2 id="普通java代码的实现"><a href="#普通java代码的实现" class="headerlink" title="普通java代码的实现"></a>普通java代码的实现</h2><h2 id="lambda表达式的实现"><a href="#lambda表达式的实现" class="headerlink" title="lambda表达式的实现"></a>lambda表达式的实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基本上学习大数据的第一个应用程序，都是一个wordcount程序，也就是统计一个文本里面出现的单词次数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一个wordcount以英文单词来演示，因为中文是以词语来切分才会有意思，如果中文切分词语，又要用到分词技术，分词并不是本文的重
      
    
    </summary>
    
      <category term="spark" scheme="http://blog.xiaojiezhu/categories/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/categories/spark/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="spark" scheme="http://blog.xiaojiezhu/tags/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>在开发工具中编写spark代码</title>
    <link href="http://blog.xiaojiezhu/2017/11/19/%E5%9C%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B8%AD%E7%BC%96%E5%86%99spark%E4%BB%A3%E7%A0%81/"/>
    <id>http://blog.xiaojiezhu/2017/11/19/在开发工具中编写spark代码/</id>
    <published>2017-11-19T04:54:04.000Z</published>
    <updated>2017-11-19T05:40:05.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我们编写spark代码时，肯定不会在shell中，我们都是在编译工具中操作的</strong></p><h1 id="使用MAVEN工程"><a href="#使用MAVEN工程" class="headerlink" title="使用MAVEN工程"></a>使用MAVEN工程</h1><p>使用spark的API很简单，引入spark的依赖就好了<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>spark的依赖中包含了一个spark的运行环境，也就是说，可以直接在IDEA以本地模式运行，这样也方便调试，也不需要连接一个服务器上面的spark环境</p></blockquote><h2 id="初始化SparkContext"><a href="#初始化SparkContext" class="headerlink" title="初始化SparkContext"></a>初始化SparkContext</h2><p>spark的一切操作都是从SparkContext开始的</p><h3 id="在java中初始化"><a href="#在java中初始化" class="headerlink" title="在java中初始化"></a>在java中初始化</h3><blockquote><p>有必要值得一提的是，下面代码中连接的<code>local</code>值是一个特殊值，它代表着会在本机启动一个spark的环境，如果要连接远程spark机器，则填写远程服务器地址</p><p>appName是给当前应用起一个名字，让管理员好区分是哪一个应用</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.JavaSparkContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 朱小杰</span></span><br><span class="line"><span class="comment"> * 时间 2017-09-23 .22:23</span></span><br><span class="line"><span class="comment"> * 说明 使用scala代码初始化SparkContext &lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     setMaster()  设置集群url，local这个特殊值可以运行在单机线程中而无需连接集群&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *     setAppName() 设置应用的名称，使得可在集群管理器中可以找到这个应用的名称&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaSparkContextInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SparkConf conf = <span class="keyword">new</span> SparkConf().setMaster(<span class="string">"local"</span>).setAppName(<span class="string">"my App"</span>);</span><br><span class="line">        JavaSparkContext jsc = <span class="keyword">new</span> JavaSparkContext(conf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在scala中初始化"><a href="#在scala中初始化" class="headerlink" title="在scala中初始化"></a>在scala中初始化</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 朱小杰 &lt;br&gt;</span></span><br><span class="line"><span class="comment">  * 时间 2017-09-23 .22:08&lt;br&gt;</span></span><br><span class="line"><span class="comment">  * 说明 使用scala代码初始化SparkContext &lt;br&gt;</span></span><br><span class="line"><span class="comment">  * setMaster()  设置集群url，local这个特殊值可以运行在单机线程中而无需连接集群&lt;br&gt;</span></span><br><span class="line"><span class="comment">  * setAppName() 设置应用的名称，使得可在集群管理器中可以找到这个应用的名称&lt;br&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaSparkContextInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args:<span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local"</span>).setAppName(<span class="string">"my app"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;我们编写spark代码时，肯定不会在shell中，我们都是在编译工具中操作的&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用MAVEN工程&quot;&gt;&lt;a href=&quot;#使用MAVEN工程&quot; class=&quot;headerlink&quot; title=&quot;使用MAVEN工程&quot;&gt;
      
    
    </summary>
    
      <category term="spark" scheme="http://blog.xiaojiezhu/categories/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/categories/spark/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="spark" scheme="http://blog.xiaojiezhu/tags/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>下载spark</title>
    <link href="http://blog.xiaojiezhu/2017/11/19/%E4%B8%8B%E8%BD%BDspark/"/>
    <id>http://blog.xiaojiezhu/2017/11/19/下载spark/</id>
    <published>2017-11-19T03:50:29.000Z</published>
    <updated>2017-11-19T04:50:38.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载并使用spark"><a href="#下载并使用spark" class="headerlink" title="下载并使用spark"></a>下载并使用spark</h1><blockquote><p>本章节仅仅是下载，并且介绍spark的目录，是普通安装模式，并不是集群模式，集群模式请参见<a href="http://blog.xiaojiezhu.com" target="_blank" rel="external">spark集群模式安装</a></p><p>在官网下载spark的压缩包，或者从github中clone代码，然后自行编译。</p></blockquote><p>解压出来有如下目录</p><ul><li>bin 包含了可以和spark进行各种交互的shell</li><li>example 官网提供的一些示例，可以查看并学习它的API</li><li>conf spark的配置</li><li>jars 包含了spark运行的所有需要的jar包</li><li>sbin 真正启动spark的运行脚本</li></ul><h1 id="spark的shell"><a href="#spark的shell" class="headerlink" title="spark的shell"></a>spark的shell</h1><p>spark带有交互式的shell，可以做即时的数据分析，提供了R，Python,Scala所提供的shell</p><blockquote><p>为什么要有spark的shell，因为spark可以在多台计算机中并行计算，所以很多分布式计算都可以在几秒钟之内完成，哪握是那种十几个节点处理TB级别数据的计算，这种情况spark shell就很适合这种情况，因为不需要编写代码运行，可以在shell中直接处理并且查看消息，不仅仅是与本机的连接，甚至是远程spark机器的连接，包括连接spark集群</p><p>spark的日志有很多，很杂，如果想要调整日志的输出限制，则在conf目录创建一个log4j.properties文件来管理日志的设置，spark的conf目录已经有一个log4j.properties.template文件了，我们复制它修改这个文件就行了<br>spark的shell在window运行有点问题，需要安装点东西，建议在linux环境运行，或者安装个虚拟机</p></blockquote><h2 id="python的shell"><a href="#python的shell" class="headerlink" title="python的shell"></a>python的shell</h2><p>运行python的shell的方式，进行spark根 目录，运行<code>bin/pyspark</code>，就会进入python的shell<br><strong>笔者对python不熟悉，所以以scala为例</strong></p><h2 id="spark的scala"><a href="#spark的scala" class="headerlink" title="spark的scala"></a>spark的scala</h2><p>运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin/spark-shell</span><br></pre></td></tr></table></figure></p><p>得到如下界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.imgur.com/htWYBW1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这就是spark的命令行了</p><h3 id="我们尝试一个简单的行数统计"><a href="#我们尝试一个简单的行数统计" class="headerlink" title="我们尝试一个简单的行数统计"></a>我们尝试一个简单的行数统计</h3><p>统计一个文本文件有多少行，我们在spark的shell中输入如下命令<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lines = sc.textFile(<span class="string">"d:/spark/text.txt"</span>);</span><br><span class="line">lines.count();<span class="comment">//得到这个文件有多少行</span></span><br><span class="line">lines.first();<span class="comment">//获取这个rdd中的第一个元素，也就是第一行</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在如下的例子中，lines是一个rdd，是从本机电脑的文件中创建出来的，我们可以通过rdd进行各种运算</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载并使用spark&quot;&gt;&lt;a href=&quot;#下载并使用spark&quot; class=&quot;headerlink&quot; title=&quot;下载并使用spark&quot;&gt;&lt;/a&gt;下载并使用spark&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本章节仅仅是下载，并且介绍spark的目录，是普通
      
    
    </summary>
    
      <category term="spark" scheme="http://blog.xiaojiezhu/categories/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/categories/spark/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="spark" scheme="http://blog.xiaojiezhu/tags/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>spark介绍</title>
    <link href="http://blog.xiaojiezhu/2017/11/19/spark%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.xiaojiezhu/2017/11/19/spark介绍/</id>
    <published>2017-11-19T02:50:13.000Z</published>
    <updated>2017-11-19T03:22:48.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spark系列"><a href="#spark系列" class="headerlink" title="spark系列"></a>spark系列</h1><h2 id="spark是什么"><a href="#spark是什么" class="headerlink" title="spark是什么"></a>spark是什么</h2><p>spark是一个通用计算框架，包含了一整套的计算模型，以及布式式集群的资源调度</p><h2 id="spark的特点"><a href="#spark的特点" class="headerlink" title="spark的特点"></a>spark的特点</h2><p><strong>与hadoop相比，spark在内存中计算，速度比hadoop快的多，便于进行交互式操作</strong></p><blockquote><p>spark提供了python,java,scala,sql的API,并且spark还能运行在hadoop集群</p></blockquote><h2 id="spark的组件"><a href="#spark的组件" class="headerlink" title="spark的组件"></a>spark的组件</h2><ul><li>spark core</li><li>spark sql</li><li>spark streaming</li><li>MLlib</li><li>GraphX</li></ul><h3 id="spark-core"><a href="#spark-core" class="headerlink" title="spark core"></a>spark core</h3><p>实现了spark core的基本功能，包含任务调度，内存管理，错误恢复，与存储系统的交互模块</p><h3 id="spark-sql"><a href="#spark-sql" class="headerlink" title="spark sql"></a>spark sql</h3><p>spark sql是spark用来操作数据结构化的程序包，通过spark sql，我们可以通过hive版本的sql来查询数据</p><h3 id="spark-streaming"><a href="#spark-streaming" class="headerlink" title="spark streaming"></a>spark streaming</h3><p>spark streaming是spark提供的对实时数据流计算的组件，比如网页服务吕在日志，或者用户提供的状态组成的消息队列，spark streaming提供了用来操作数据流的API，并且与RDD高度对应</p><h3 id="MLlib"><a href="#MLlib" class="headerlink" title="MLlib"></a>MLlib</h3><p>spark包含了常见的机器学习算法，包括分类，回归，聚类，协同过滤等，还提供了模型评估，数据导入等额外的支持功能</p><h3 id="GraphX"><a href="#GraphX" class="headerlink" title="GraphX"></a>GraphX</h3><p>这是用来操作图，比如社交网络的朋友关系图的程序库，可以进行并行的图计算，也扩展了rdd的API</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spark系列&quot;&gt;&lt;a href=&quot;#spark系列&quot; class=&quot;headerlink&quot; title=&quot;spark系列&quot;&gt;&lt;/a&gt;spark系列&lt;/h1&gt;&lt;h2 id=&quot;spark是什么&quot;&gt;&lt;a href=&quot;#spark是什么&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="spark" scheme="http://blog.xiaojiezhu/categories/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/categories/spark/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="spark" scheme="http://blog.xiaojiezhu/tags/spark/"/>
    
      <category term="大数据" scheme="http://blog.xiaojiezhu/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>浏览器鼠标滚轮事件</title>
    <link href="http://blog.xiaojiezhu/2017/11/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6/"/>
    <id>http://blog.xiaojiezhu/2017/11/18/浏览器鼠标滚轮事件/</id>
    <published>2017-11-18T15:47:42.000Z</published>
    <updated>2017-11-18T16:37:10.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监听浏览器的滚轮事件"><a href="#监听浏览器的滚轮事件" class="headerlink" title="监听浏览器的滚轮事件"></a>监听浏览器的滚轮事件</h1><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><ul><li>监听鼠标滚轮事件</li><li>获取是向上滚动还是向下滚动</li><li>处理鼠标的连续滚动</li></ul><blockquote><p>笔者以谷歌浏览器亲试，谷歌内核的都可以<br>火狐浏览器不行，ie浏览器也不行</p></blockquote><h3 id="1-实现鼠标滚轮事件"><a href="#1-实现鼠标滚轮事件" class="headerlink" title="1.实现鼠标滚轮事件"></a>1.实现鼠标滚轮事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousewheel = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="keyword">if</span>(e.deltaY &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//向下</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//向上                             </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取是向上滚动还是向下滚动"><a href="#2-获取是向上滚动还是向下滚动" class="headerlink" title="2.获取是向上滚动还是向下滚动"></a>2.获取是向上滚动还是向下滚动</h3><blockquote><p>这里面的deltaY是Y轴滚动的像素点，如果是正数，则是向下滚动，如果是负数，则是向下滚动</p></blockquote><h3 id="3-处理鼠标滚动的连续滚动事件"><a href="#3-处理鼠标滚动的连续滚动事件" class="headerlink" title="3.处理鼠标滚动的连续滚动事件"></a>3.处理鼠标滚动的连续滚动事件</h3><blockquote><p>先说一下什么是鼠标的连续滚动，鼠标的滚轮每转动到相应的地方都会触发一个滚轮事件，但是如果滚动的用力，就可能会触发多次的滚动事件。<br>也就是说操作一次鼠标滚动，很有可能会触发多次鼠标滚动的事件，这样如果要处理一些数据的事件，就不是我们想要的效果了</p></blockquote><p><strong>我们来处理掉这个事件，让它1秒钟只触发一次就行了</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousewheel = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(e));</span><br><span class="line">    <span class="keyword">if</span>(e.deltaY &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//向下</span></span><br><span class="line">        <span class="keyword">if</span>(enableRool())&#123;</span><br><span class="line"><span class="comment">//做点事情</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//向上</span></span><br><span class="line">        <span class="keyword">if</span>(enableRool())&#123;</span><br><span class="line"><span class="comment">//做点事情</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> roolTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableRool</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span>(now - roolTime &gt; <span class="number">1000</span>)&#123;</span><br><span class="line">        roolTime = now;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过如上的代码可以看到，在<code>enableRool()</code>方法中，如果距离上次滚动时间小于1秒的话，是不会在触发滚轮事件的，所以也就不会造成一次操作，触发多次滚动的事件了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;监听浏览器的滚轮事件&quot;&gt;&lt;a href=&quot;#监听浏览器的滚轮事件&quot; class=&quot;headerlink&quot; title=&quot;监听浏览器的滚轮事件&quot;&gt;&lt;/a&gt;监听浏览器的滚轮事件&lt;/h1&gt;&lt;h2 id=&quot;实现目标&quot;&gt;&lt;a href=&quot;#实现目标&quot; class=&quot;head
      
    
    </summary>
    
      <category term="前端" scheme="http://blog.xiaojiezhu/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://blog.xiaojiezhu/tags/js/"/>
    
      <category term="事件" scheme="http://blog.xiaojiezhu/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://blog.xiaojiezhu/2017/11/13/writeblog/"/>
    <id>http://blog.xiaojiezhu/2017/11/13/writeblog/</id>
    <published>2017-11-13T02:26:00.000Z</published>
    <updated>2017-11-13T02:54:00.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="怎么写一篇博客呢"><a href="#怎么写一篇博客呢" class="headerlink" title="怎么写一篇博客呢"></a><strong>怎么写一篇博客呢</strong></h1><p>你猜啊</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><pre><code>是的，它就是这样子的:</code></pre><blockquote><ul><li>直接量</li><li>变量</li></ul></blockquote><h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a><strong>代码如下</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;怎么写一篇博客呢&quot;&gt;&lt;a href=&quot;#怎么写一篇博客呢&quot; class=&quot;headerlink&quot; title=&quot;怎么写一篇博客呢&quot;&gt;&lt;/a&gt;&lt;strong&gt;怎么写一篇博客呢&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;你猜啊&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="文章分类" scheme="http://blog.xiaojiezhu/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="文章标签" scheme="http://blog.xiaojiezhu/tags/%E6%96%87%E7%AB%A0%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.xiaojiezhu/2017/11/13/hello-world/"/>
    <id>http://blog.xiaojiezhu/2017/11/13/hello-world/</id>
    <published>2017-11-13T02:11:23.637Z</published>
    <updated>2017-11-13T02:11:23.637Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring的factorybean</title>
    <link href="http://blog.xiaojiezhu/2017/11/13/spring-factorybean/"/>
    <id>http://blog.xiaojiezhu/2017/11/13/spring-factorybean/</id>
    <published>2017-11-12T16:00:00.000Z</published>
    <updated>2017-11-13T04:09:31.516Z</updated>
    
    <content type="html"><![CDATA[<p><strong>spring的factory是什么作用呢</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FactoryBean</span><br></pre></td></tr></table></figure></p><p>可以让用户把任意bean注入到spring中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;spring的factory是什么作用呢&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FactoryBean&lt;/
      
    
    </summary>
    
      <category term="spring" scheme="http://blog.xiaojiezhu/categories/spring/"/>
    
    
      <category term="spring" scheme="http://blog.xiaojiezhu/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>vue的用法</title>
    <link href="http://blog.xiaojiezhu/2017/11/13/vue/"/>
    <id>http://blog.xiaojiezhu/2017/11/13/vue/</id>
    <published>2017-11-12T16:00:00.000Z</published>
    <updated>2017-11-18T00:55:43.400Z</updated>
    
    <content type="html"><![CDATA[<p>#如何使用vue</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> v  = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el :  <span class="string">"#app"</span>,</span><br><span class="line">data : &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#如何使用vue&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v  = &lt;span
      
    
    </summary>
    
      <category term="前端" scheme="http://blog.xiaojiezhu/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://blog.xiaojiezhu/tags/vue/"/>
    
  </entry>
  
</feed>
